# -*- coding: utf-8 -*-
"""4_Influencer_Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uRACZUFrhYcVYSuvwpyjr60IvYXE7XOu
"""

import streamlit as st
import pandas as pd

# Custom CSS styling
st.markdown("""
<style>
    .header {
        color: #2e35a0;
        border-bottom: 2px solid #f6a4b9;
        padding-bottom: 10px;
    }
    .metric-box {
        background-color: white;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        border-left: 5px solid #2e35a0;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .highlight-pink {
        background-color: #f6a4b9;
        color: white;
        padding: 5px 10px;
        border-radius: 5px;
    }
    .highlight-blue {
        background-color: #2e35a0;
        color: white;
        padding: 5px 10px;
        border-radius: 5px;
    }
    .post-box {
        background-color: white;
        border-radius: 10px;
        padding: 15px;
        margin: 15px 0;
        border: 1px solid #f6a4b9;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    df = pd.read_excel("data/instagram_analysis_Fashion All (1) (1).xlsx")
    return df[df["status"] == "Success"]

df = load_data()

# --- Get Influencer from URL params ---
params = st.experimental_get_query_params()
username = params.get("username", [None])[0]

if username:
    user = df[df["username"] == username].iloc[0]

    # Header Section
    col1, col2 = st.columns([1, 4])
    with col1:
        st.image(user["profile_pic_url"], width=100)
    with col2:
        st.markdown(f"<h1 class='header'>üìä {user['username']}'s Dashboard</h1>", unsafe_allow_html=True)

    # Basic Info Section
    with st.container():
        st.markdown('<div class="metric-box">', unsafe_allow_html=True)
        cols = st.columns(3)
        with cols[0]:
            st.markdown(f"<div class='highlight-pink'>üë§ Bio</div>", unsafe_allow_html=True)
            st.markdown(f"{user['bio']}")
        with cols[1]:
            st.markdown(f"<div class='highlight-pink'>üè∑Ô∏è Niche</div>", unsafe_allow_html=True)
            st.markdown(f"{user['Niche']}")
        with cols[2]:
            st.markdown(f"<div class='highlight-pink'>üìÇ Category</div>", unsafe_allow_html=True)
            st.markdown(f"{user['category_name']}")
        st.markdown('</div>', unsafe_allow_html=True)

    # Metrics Section
    with st.container():
        st.markdown('<div class="metric-box">', unsafe_allow_html=True)
        cols = st.columns(4)
        with cols[0]:
            st.markdown(f"<div class='highlight-blue'>üë• Followers</div>", unsafe_allow_html=True)
            st.markdown(f"**{int(user['followers']):,}**")
        with cols[1]:
            st.markdown(f"<div class='highlight-blue'>üë§ Following</div>", unsafe_allow_html=True)
            st.markdown(f"**{int(user['following']):,}**")
        with cols[2]:
            st.markdown(f"<div class='highlight-blue'>‚úÖ Verified</div>", unsafe_allow_html=True)
            st.markdown(f"**{'Yes' if user['is_verified'] else 'No'}**")
        with cols[3]:
            st.markdown(f"<div class='highlight-blue'>üè¢ Business</div>", unsafe_allow_html=True)
            st.markdown(f"**{'Yes' if user['is_business_account'] else 'No'}**")
        st.markdown('</div>', unsafe_allow_html=True)

    # Engagement Metrics
    try:
        avg_likes = (user["most_liked_likes"] + user["least_liked_likes"]) / 2
        avg_comments = (user["most_liked_comments"] + user["least_liked_comments"]) / 2
        eng_rate = ((avg_likes + avg_comments) / user["followers"]) * 100
    except:
        eng_rate = 0

    with st.container():
        st.markdown('<div class="metric-box">', unsafe_allow_html=True)
        cols = st.columns(2)
        with cols[0]:
            st.markdown(f"<div class='highlight-pink'>üìà Engagement Rate</div>", unsafe_allow_html=True)
            st.markdown(f"**{eng_rate:.2f}%**")
        with cols[1]:
            max_reach = user["followers"]
            if max_reach < 10000:
                inf_type = "Nano"
            elif max_reach < 100000:
                inf_type = "Micro"
            elif max_reach < 1000000:
                inf_type = "Macro"
            else:
                inf_type = "Mega"
            st.markdown(f"<div class='highlight-pink'>üåü Influencer Type</div>", unsafe_allow_html=True)
            st.markdown(f"**{inf_type}**")
        st.markdown('</div>', unsafe_allow_html=True)

    # Post Previews
    st.markdown("<h2 class='header'>üì∏ Post Performance</h2>", unsafe_allow_html=True)

    with st.container():
        st.markdown('<div class="post-box">', unsafe_allow_html=True)
        st.markdown(f"<div class='highlight-blue'>üî• Most Liked Post</div>", unsafe_allow_html=True)
        st.markdown(f"[View on Instagram]({user['most_liked_url']})")
        cols = st.columns(2)
        with cols[0]:
            st.markdown(f"‚ù§Ô∏è **{int(user['most_liked_likes']):,}** likes")
        with cols[1]:
            st.markdown(f"üí¨ **{int(user['most_liked_comments']):,}** comments")
        st.markdown('</div>', unsafe_allow_html=True)

    with st.container():
        st.markdown('<div class="post-box">', unsafe_allow_html=True)
        st.markdown(f"<div class='highlight-blue'>üí§ Least Liked Post</div>", unsafe_allow_html=True)
        st.markdown(f"[View on Instagram]({user['least_liked_url']})")
        cols = st.columns(2)
        with cols[0]:
            st.markdown(f"‚ù§Ô∏è **{int(user['least_liked_likes']):,}** likes")
        with cols[1]:
            st.markdown(f"üí¨ **{int(user['least_liked_comments']):,}** comments")
        st.markdown('</div>', unsafe_allow_html=True)

    # YouTube Section
    @st.cache_data
    def load_youtube():
        yt = pd.read_excel("data/instagram_analysis_Fashion All (1) (1).xlsx", sheet_name=1)
        return yt

    yt_df = load_youtube()
    yt_user = yt_df[yt_df["instagram_username"] == username]

    if not yt_user.empty:
        yt = yt_user.iloc[0]
        st.markdown("<h2 class='header'>‚ñ∂Ô∏è YouTube Overview</h2>", unsafe_allow_html=True)

        with st.container():
            st.markdown('<div class="metric-box">', unsafe_allow_html=True)
            cols = st.columns([1, 4])
            with cols[0]:
                st.image(yt["youtube_profile_image"], width=100)
            with cols[1]:
                st.markdown(f"<div class='highlight-pink'>üì∫ YouTube Name</div>", unsafe_allow_html=True)
                st.markdown(f"**{yt['youtube_name']}**")
            st.markdown('</div>', unsafe_allow_html=True)

        with st.container():
            st.markdown('<div class="metric-box">', unsafe_allow_html=True)
            cols = st.columns(3)
            with cols[0]:
                st.markdown(f"<div class='highlight-blue'>üë• Subscribers</div>", unsafe_allow_html=True)
                st.markdown(f"**{int(yt['subscribers']):,}**")
            with cols[1]:
                st.markdown(f"<div class='highlight-blue'>üëÄ Total Views</div>", unsafe_allow_html=True)
                st.markdown(f"**{int(yt['total_views']):,}**")
            with cols[2]:
                st.markdown(f"<div class='highlight-blue'>üé• Top Video</div>", unsafe_allow_html=True)
                st.markdown(f"[View Video]({yt['top_video_link']}) ({int(yt['top_video_views']):,} views)")
            st.markdown('</div>', unsafe_allow_html=True)

        with st.container():
            st.markdown('<div class="metric-box">', unsafe_allow_html=True)
            cols = st.columns(2)
            with cols[0]:
                try:
                    yt_engagement = (yt["top_video_views"] / yt["subscribers"]) * 100
                    st.markdown(f"<div class='highlight-pink'>üìä YouTube Engagement</div>", unsafe_allow_html=True)
                    st.markdown(f"**{yt_engagement:.2f}%**")
                except:
                    st.markdown(f"<div class='highlight-pink'>üìä YouTube Engagement</div>", unsafe_allow_html=True)
                    st.markdown("**N/A**")
            with cols[1]:
                max_reach = max(user["followers"], yt["subscribers"])
                if max_reach < 10000:
                    inf_type = "Nano"
                elif max_reach < 100000:
                    inf_type = "Micro"
                elif max_reach < 1000000:
                    inf_type = "Macro"
                else:
                    inf_type = "Mega"
                st.markdown(f"<div class='highlight-pink'>üåê Combined Influencer Type</div>", unsafe_allow_html=True)
                st.markdown(f"**{inf_type}**")
            st.markdown('</div>', unsafe_allow_html=True)
else:
    st.warning("No influencer selected. Please go back to the list and click on a profile.")